#!/usr/bin/env php
<?php
require_once("./tools/Cli.php");

use App\Cli;

execute($argv);

function execute($arguments)
{
    /* variables */
    $db_info = [];
    $db_connection = [];
    // remove file name from args
    $arguments = RemoveFileNameFromArguments($arguments);

    if (in_array("--help", $arguments)) {
        PrintHelp();
        die;
    }

    $db_info = GetDataBaseParams($arguments);
    $db_connection = [
        "3.1" => mysqli_connect($db_info["3.1"]["host"], $db_info["3.1"]["username"], $db_info["3.1"]["password"], $db_info["3.1"]["name"]),
        "3.3" => mysqli_connect($db_info["3.3"]["host"], $db_info["3.3"]["username"], $db_info["3.3"]["password"], $db_info["3.3"]["name"])
    ];

    // load 3.3 submission id list
    $submission_id_list = mysqli_fetch_all(mysqli_query($db_connection['3.3'], "SELECT submission_id FROM `submissions`"));

    // set sections
    UpdateSections($submission_id_list, $db_connection);
}

/**
 * Removes the current file name from the provided array of arguments.
 *
 * This function iterates through the array of arguments and removes any
 * element that has the same value as the base name of the current file.
 *
 * @param array $arguments The array of arguments to process.
 *
 * @return array The updated array with the current file name removed.
 */
function RemoveFileNameFromArguments($arguments)
{
    foreach ($arguments as $key => $value) {
        if ($value === basename(__FILE__)) {
            unset($arguments[$key]);
        }
    }
    return $arguments;
}

/**
 * Prints help information for the CLI application.
 *
 * This function prints a help message describing the usage of the CLI application,
 * including the expected command-line arguments.
 *
 * Example:
 *   php script.php filename [ojs-3.1 database name] [ojs-3.3 database name]
 *
 * @return void
 */
function PrintHelp()
{
    Cli::print("\nhelp : filename [ojs-3.1 database name]:[username]:[password]:[host] [ojs-3.3 database name]:[username]:[password]:[host]\n");
}

/**
 * Parses command line arguments to extract database parameters.
 *
 * @param array $arguments The array of command line arguments.
 *
 * @return array Associative array containing database parameters for OJS 3.1 and OJS 3.3.
 */
function GetDataBaseParams($arguments)
{
    $temp = explode(":", $arguments[1]);
    $template["3.1"] = [
        "name" => $temp[0],
        "username" => $temp[1],
        "password" => $temp[2],
        "host" => $temp[3],
    ];
    $temp = explode(":", $arguments[2]);
    $template["3.3"] = [
        "name" => $temp[0],
        "username" => $temp[1],
        "password" => $temp[2],
        "host" => $temp[3],
    ];
    return $template;
}

function UpdateSections($submission_id_list, $db_connection)
{
    // submission - section_id => sections_title => ojs 3.3 section title => update section id 
    Cli::print("\n Update Sections \n");
    foreach ($submission_id_list as $key => $value) {

        // get submission section id on ojs 3.1
        $submission_section_id_query = mysqli_query($db_connection["3.1"], "SELECT `submission_id`,`section_id` FROM `submissions` WHERE `submission_id`=" . $value[0]);
        if ($submission_section_id_query == false || mysqli_num_rows($submission_section_id_query) == 0) {
            continue;
        }
        $submission_section_id = mysqli_fetch_all($submission_section_id_query)[0];

        $submission_section_title = mysqli_fetch_all(mysqli_query($db_connection["3.1"], "SELECT `setting_value` FROM `section_settings` WHERE `setting_name`='title' AND `section_id`=" . $submission_section_id[1]))[0][0];

        // get section id on ojs 3.3
        $submission_section_id = mysqli_fetch_all(mysqli_query($db_connection['3.3'], "SELECT `section_id` FROM `section_settings` WHERE `setting_name`='title' AND `setting_value`='" . $submission_section_title . "'"))[0][0];

        mysqli_query($db_connection["3.3"], "UPDATE `publications` SET `section_id`='" . $submission_section_id . "' WHERE `submission_id`=" . $value[0]);

        Cli::print_success("Submission #" . $value[0] . " section updated!");

    }
    Cli::print_success("Update Sections successfully!\n");
}