#!/usr/bin/env php
<?php
require_once("./tools/Cli.php");

use App\Cli;

execute($argv);

function execute($arguments)
{
    /* variables */
    $db_info = [];
    $db_connection = [];
    // remove file name from args
    $arguments = RemoveFileNameFromArguments($arguments);

    if (in_array("--help", $arguments)) {
        PrintHelp();
        die;
    }

    $db_info = GetDataBaseParams($arguments);
    $db_connection = [
        "3.1" => mysqli_connect($db_info["3.1"]["host"], $db_info["3.1"]["username"], $db_info["3.1"]["password"], $db_info["3.1"]["name"]),
        "3.3" => mysqli_connect($db_info["3.3"]["host"], $db_info["3.3"]["username"], $db_info["3.3"]["password"], $db_info["3.3"]["name"])
    ];

    // load 3.3 submission id list
    $submission_id_list = mysqli_fetch_all(mysqli_query($db_connection['3.3'], "SELECT submission_id FROM `submissions`"));

    // Step 1 - Remove admin admin contributors from authors
    RemoveAdminAuthors($submission_id_list, $db_connection);

    // Step 2 - update authors email
    UpdateAuthorsEmail($submission_id_list, $db_connection);

    // Step 3 - Update author settings
    UpdateAuthorsData($submission_id_list, $db_connection);

    // Step 4 - Order
    UpdateMainContent($submission_id_list, $db_connection);
}

/**
 * Removes the current file name from the provided array of arguments.
 *
 * This function iterates through the array of arguments and removes any
 * element that has the same value as the base name of the current file.
 *
 * @param array $arguments The array of arguments to process.
 *
 * @return array The updated array with the current file name removed.
 */
function RemoveFileNameFromArguments($arguments)
{
    foreach ($arguments as $key => $value) {
        if ($value === basename(__FILE__)) {
            unset($arguments[$key]);
        }
    }
    return $arguments;
}

/**
 * Prints help information for the CLI application.
 *
 * This function prints a help message describing the usage of the CLI application,
 * including the expected command-line arguments.
 *
 * Example:
 *   php script.php filename [ojs-3.1 database name] [ojs-3.3 database name]
 *
 * @return void
 */
function PrintHelp()
{
    Cli::print("\nhelp : filename [ojs-3.1 database name]:[username]:[password]:[host] [ojs-3.3 database name]:[username]:[password]:[host]\n");
}

/**
 * Parses command line arguments to extract database parameters.
 *
 * @param array $arguments The array of command line arguments.
 *
 * @return array Associative array containing database parameters for OJS 3.1 and OJS 3.3.
 */
function GetDataBaseParams($arguments)
{
    $temp = explode(":", $arguments[1]);
    $template["3.1"] = [
        "name" => $temp[0],
        "username" => $temp[1],
        "password" => $temp[2],
        "host" => $temp[3],
    ];
    $temp = explode(":", $arguments[2]);
    $template["3.3"] = [
        "name" => $temp[0],
        "username" => $temp[1],
        "password" => $temp[2],
        "host" => $temp[3],
    ];
    return $template;
}

/**
 * Remove admin authors and corresponding author settings for a given list of submission IDs.
 *
 * This function deletes records from the `authors` and `author_settings` tables
 * in the OJS 3.3 database where the `setting_value` in `author_settings` is set to "admin"
 * and the associated submission IDs match the provided list.
 *
 * @param array $submission_id_list An array containing submission IDs for which admin authors and settings will be removed.
 * @param array $db_connection An associative array containing database connections for OJS 3.3.
 *
 * @return void
 */
function RemoveAdminAuthors($submission_id_list, $db_connection)
{
    Cli::print("\n Delete admin authors & author_settings\n");

    // get all data from author_settings with setting_value = "admin"
    $get_all_author_setting = mysqli_fetch_all(mysqli_query($db_connection["3.3"], "SELECT * FROM `author_settings` WHERE `setting_value`='admin'"));

    Cli::print("Clean authors");
    // delete authors
    foreach ($get_all_author_setting as $auth_key => $auth_value) {
        $get_author_query = mysqli_query($db_connection["3.3"], "SELECT * FROM `authors` WHERE `author_id`=" . $auth_value[0]);
        if ($get_author_query == false) {
            continue;
        }
        mysqli_query($db_connection["3.3"], "DELETE FROM `authors` WHERE `author_id`=" . $auth_value[0]);
        Cli::print_success("reocrd (author_id)#" . $auth_value[0] . " successfully deleted.");
    }
    Cli::print_success("Clean authors successfully!");

    Cli::print("\nClean author_settings");
    // delete author settings
    foreach ($get_all_author_setting as $author_setting_key => $author_setting_value) {
        $author_setting_all_data = mysqli_fetch_all(mysqli_query($db_connection["3.3"], "SELECT * FROM `author_settings` WHERE `author_id`=" . $author_setting_value[0]));
        foreach ($author_setting_all_data as $author_setting_all_data_key => $author_setting_all_data_value) {
            mysqli_query($db_connection["3.3"], "DELETE FROM `author_settings` WHERE `author_settings`.`author_id` = " . $author_setting_all_data_value[0] .
                " AND `author_settings`.`locale` = '" . $author_setting_all_data_value[1] . "' AND `author_settings`.`setting_name` = '" .
                $author_setting_all_data_value[2] . "' AND `author_settings`.`setting_value` = '" . $author_setting_all_data_value[3] . "'");
            Cli::print_success("reocrd (author_id)#" . $author_setting_all_data_value[0] . " successfully deleted.");
        }
    }
    Cli::print_success("Clean author_settings successfully!\n");
}

/**
 * Update authors' email addresses for a given list of submission IDs.
 *
 * This function retrieves the author list for each submission ID from the OJS 3.3 database,
 * as well as the corresponding author list from the OJS 3.1 database based on submission ID.
 * It then updates the email addresses of authors in the OJS 3.3 database with the email addresses
 * from the OJS 3.1 database, assuming the structure matches.
 *
 * @param array $submission_id_list An array containing submission IDs for which authors' email addresses will be updated.
 * @param array $db_connection An associative array containing database connections for OJS 3.3 and OJS 3.1.
 *
 * @return void
 */
function UpdateAuthorsEmail($submission_id_list, $db_connection)
{
    Cli::print("\n Update authors email \n");
    foreach ($submission_id_list as $key => $value) {
        $get_author_list_query = mysqli_query($db_connection["3.3"], "SELECT * FROM `authors` WHERE `publication_id`=" . $value[0]);
        if ($get_author_list_query == false || mysqli_num_rows($get_author_list_query) == 0) {
            continue;
        }
        $get_last_author_list_query = mysqli_query($db_connection["3.1"], "SELECT * FROM `authors` WHERE `submission_id`=" . $value[0]);
        $new_author_list = mysqli_fetch_all($get_author_list_query);
        $last_author_list = mysqli_fetch_all($get_last_author_list_query);

        foreach ($new_author_list as $new_author_key => $new_author_value) {
            mysqli_query($db_connection["3.3"], "UPDATE `authors` SET `email`='" . $last_author_list[$new_author_key][5] . "' WHERE `author_id`=" . $new_author_value[0]);
            Cli::print_success("Record (author_id) #" . $new_author_value[0] . " Email updated successfully!");
        }
    }
    Cli::print_success("Update author email successfully!\n");
}

/**
 * Update authors' data, including affiliation, biography, familyName, and givenName,
 * for a given list of submission IDs.
 *
 * This function retrieves the author list and corresponding author settings for each submission ID
 * from both the OJS 3.3 and OJS 3.1 databases. It then updates the relevant author settings in
 * the OJS 3.3 database with the corresponding values from the OJS 3.1 database, assuming the structure matches.
 *
 * @param array $submission_id_list An array containing submission IDs for which authors' data will be updated.
 * @param array $db_connection An associative array containing database connections for OJS 3.3 and OJS 3.1.
 *
 * @return void
 */
function UpdateAuthorsData($submission_id_list, $db_connection)
{
    Cli::print("\n Update authors data \n");
    foreach ($submission_id_list as $key => $value) {
        // get author list
        $get_author_list_query = mysqli_query($db_connection["3.3"], "SELECT * FROM `authors` WHERE `publication_id`=" . $value[0]);
        $get_last_author_list_query = mysqli_query($db_connection["3.1"], "SELECT * FROM `authors` WHERE `submission_id`=" . $value[0]);
        if ($get_author_list_query == false || mysqli_num_rows($get_author_list_query) == 0) {
            continue;
        }
        $new_author_list = mysqli_fetch_all($get_author_list_query);
        $last_author_list = mysqli_fetch_all($get_last_author_list_query);

        foreach ($new_author_list as $new_author_key => $new_author_value) {

            $get_new_author_setting_list = mysqli_query($db_connection["3.3"], "SELECT * FROM `author_settings` WHERE `author_id`=" . $new_author_value[0]);
            $get_last_author_setting_list = mysqli_query($db_connection["3.1"], "SELECT * FROM `author_settings` WHERE `author_id`=" . $last_author_list[$new_author_key][0]);
            if ($get_new_author_setting_list == false || mysqli_num_rows($get_new_author_setting_list) == 0) {
                continue;
            }

            $get_new_author_setting_list_data = mysqli_fetch_all($get_new_author_setting_list);
            $get_last_author_setting_list_data = mysqli_fetch_all($get_last_author_setting_list);

            foreach ($get_new_author_setting_list_data as $get_new_author_setting_list_data_key => $get_new_author_setting_list_data_value) {

                if ($get_new_author_setting_list_data_value[2] == "affiliation") {
                    foreach ($get_last_author_setting_list_data as $aff_key => $aff_value) {
                        if ($aff_value[2] == "affiliation") {
                            mysqli_query($db_connection["3.3"], "UPDATE `author_settings` SET `setting_value`='" . $aff_value[3] . "' WHERE `setting_name`='affiliation' AND `author_id`=" . $get_new_author_setting_list_data_value[0]);
                            Cli::print_success("Record (author_id) #" . $get_new_author_setting_list_data_value[0] . " affiliation updated successfully!");
                        }
                    }
                }

                if ($get_new_author_setting_list_data_value[2] == "biography") {
                    foreach ($get_last_author_setting_list_data as $aff_key => $aff_value) {
                        if ($aff_value[2] == "biography") {
                            mysqli_query($db_connection["3.3"], "UPDATE `author_settings` SET `setting_value`='" . $aff_value[3] . "' WHERE `setting_name`='biography' AND `author_id`=" . $get_new_author_setting_list_data_value[0]);
                            Cli::print_success("Record (author_id) #" . $get_new_author_setting_list_data_value[0] . " biography updated successfully!");
                        }
                    }
                }

                if ($get_new_author_setting_list_data_value[2] == "familyName") {
                    foreach ($get_last_author_setting_list_data as $aff_key => $aff_value) {
                        if ($aff_value[2] == "familyName") {
                            mysqli_query($db_connection["3.3"], "UPDATE `author_settings` SET `setting_value`='" . $aff_value[3] . "' WHERE `setting_name`='familyName' AND `author_id`=" . $get_new_author_setting_list_data_value[0]);
                            Cli::print_success("Record (author_id) #" . $get_new_author_setting_list_data_value[0] . " familyName updated successfully!");
                        }
                    }
                }

                if ($get_new_author_setting_list_data_value[2] == "givenName") {
                    foreach ($get_last_author_setting_list_data as $aff_key => $aff_value) {
                        if ($aff_value[2] == "givenName") {
                            mysqli_query($db_connection["3.3"], "UPDATE `author_settings` SET `setting_value`='" . $aff_value[3] . "' WHERE `setting_name`='givenName' AND `author_id`=" . $get_new_author_setting_list_data_value[0]);
                            Cli::print_success("Record (author_id) #" . $get_new_author_setting_list_data_value[0] . " givenName updated successfully!");
                        }
                    }
                }

            }

        }

    }
    Cli::print_success("Update author data successfully!\n");
}

/**
 * Update main content data for authors in a given list of submission IDs.
 *
 * This function retrieves the authors' data from the OJS 3.1 database based on submission ID,
 * and for each author with a role ID of 1, it finds a matching author in the OJS 3.3 database based on
 * familyName and givenName. If a match is found, it updates the `primary_contact_id` in the `publications` table
 * in the OJS 3.3 database.
 *
 * @param array $submission_id_list An array containing submission IDs for which main content data will be updated.
 * @param array $db_connection An associative array containing database connections for OJS 3.3 and OJS 3.1.
 *
 * @return void
 */
function UpdateMainContent($submission_id_list, $db_connection)
{
    Cli::print("\n Update author contents data \n");
    foreach ($submission_id_list as $key => $value) {
        // get author list
        $get_author_query = mysqli_query($db_connection["3.1"], "SELECT * FROM `authors` WHERE `submission_id`=" . $value[0]);
        if ($get_author_query == false || mysqli_num_rows($get_author_query) == 0) {
            continue;
        }
        $author_list = mysqli_fetch_all($get_author_query);
        foreach ($author_list as $author_key => $author_value) {
            if ($author_value[2] == 1) {
                $author_familyName = mysqli_fetch_all(mysqli_query($db_connection["3.1"], "SELECT * FROM `author_settings` WHERE `setting_name`='familyName' AND `author_id`=" . $author_value[0]))[0][3];
                $author_givenName = mysqli_fetch_all(mysqli_query($db_connection["3.1"], "SELECT * FROM `author_settings` WHERE `setting_name`='givenName' AND `author_id`=" . $author_value[0]))[0][3];

                $new_author_list_query = mysqli_query($db_connection["3.3"], "SELECT * FROM `authors` WHERE `publication_id`=" . $value[0]);
                if ($new_author_list_query == false || mysqli_num_rows($new_author_list_query) == 0) {
                    continue;
                }
                $new_author_list = mysqli_fetch_all($new_author_list_query);

                foreach ($new_author_list as $new_authors_key => $new_authors_value) {

                    $new_author_familyName = mysqli_fetch_all(mysqli_query($db_connection["3.3"], "SELECT setting_value FROM `author_settings` WHERE `setting_name`='familyName' AND `author_id`=" . $new_authors_value[0]))[0][0];
                    $new_author_givenName = mysqli_fetch_all(mysqli_query($db_connection["3.3"], "SELECT setting_value FROM `author_settings` WHERE `setting_name`='givenName' AND `author_id`=" . $new_authors_value[0]))[0][0];

                    if ($new_author_familyName == $author_familyName && $new_author_givenName == $author_givenName) {
                        mysqli_query($db_connection["3.3"], "UPDATE `publications` SET `primary_contact_id` = " . $new_authors_value[0] . " WHERE `submission_id`=" . $value[0]);
                        Cli::print_success("Author #" . $new_authors_value[0] . " successfully!");
                    }

                }
            }
        }
    }
    Cli::print_success("Update author contents successfully!\n");
}